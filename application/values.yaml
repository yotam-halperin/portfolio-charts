# Default values for crossyroad.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

namespace: default

# define tls status
tls:
  enabled: true
  clusterissuer:
    name: letsencrypt-issuer
    region: eu-west-2
    hostedZoneID: Z02460903E1CDZX8MJD9R
    role: arn:aws:iam::644435390668:role/yh-tls-node-role

crossyDeployment:
  name: crossyroad
  replicaCount: 3
  appContainerPort: 5000

image:
  name: 644435390668.dkr.ecr.eu-west-2.amazonaws.com/crossyroad-backend
  tag: 1.0.22

nginxDeployment:
  name: nginx
  image: 
    name: 644435390668.dkr.ecr.eu-west-2.amazonaws.com/crossyroad-frontend
  replicaCount: 3
  appContainerPort: 80


# configmap
configmap:
  name: myconf

# main service between app to ingress
backendService:
  name: app
  applicationPort: 5000

frontendService:
  name: frontend
  applicationPort: 80

### Ingress Nginx
ingress:
  enabled: true
  name: crossy-ingress
  className: nginx
  domain: yotam.store
  secretNameCertificate: secret-tls


### AWS Secrets Manager
secretStore:
  name: secretstore
  awsSrevice: SecretsManager
  region: eu-west-2

externalSecret:
  name: externalsecret
  awsSecretName: yh_portfolio_secret
  clusterSecretName: yhportfoliosecret



### MySQL database
mysql: 
  namespaceOverride: default
  architecture: replication
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-the-root-password-on-first-run
    ##
    rootPassword: ""
    ## @param auth.createDatabase Whether to create the .Values.auth.database or not
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
    ##
    createDatabase: true
    ## @param auth.database Name for a custom database to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-on-first-run
    ##
    database: mydb
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#creating-a-database-user-on-first-run
    ##
    username: "yotam"
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: ""
    ## @param auth.replicationUser MySQL replication user
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mysql#setting-up-a-replication-cluster
    ##
    replicationUser: replicator
    ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
    ##
    replicationPassword: ""
    ## @param auth.existingSecret Use existing secret for password details. The secret has to contain the keys `mysql-root-password`, `mysql-replication-password` and `mysql-password`
    ## NOTE: When it's set the auth.rootPassword, auth.password, auth.replicationPassword are ignored.
    ##
    existingSecret: yhportfoliosecret
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false
    ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
    ## Example:
    ## customPasswordFiles:
    ##   root: /vault/secrets/mysql-root
    ##   user: /vault/secrets/mysql-user
    ##   replicator: /vault/secrets/mysql-replicator
    ##
    customPasswordFiles: {}
  ## @param initdbScripts Dictionary of initdb scripts
  ## Specify dictionary of scripts to be run at first boot
  ## Example:
  ## initdbScripts:
  ##   my_init_script.sh: |
  ##      #!/bin/bash
  ##      echo "Do something."
  ##
  initdbScripts: {}
  ## @param initdbScriptsConfigMap ConfigMap with the initdb scripts (Note: Overrides `initdbScripts`)
  ##
  initdbScriptsConfigMap: db-configmap

  secondary:
    replicaCount: 2
  



resources: {
  limits: {
    cpu: 64m,
    memory: 150Mi
  },  
  requests: {
      cpu: 32m,
      memory: 75Mi
  }
}
  
kibana:
  serviceName: elasticsearch-master-hl
  port: 5601